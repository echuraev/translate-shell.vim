*trans.txt*   Translate text using translate-shell in vim.
 _                       _       _                _          _ _       _            ~
| |                     | |     | |              | |        | | |     (_)           ~
| |_ _ __ __ _ _ __  ___| | __ _| |_ ___ ____ ___| |__   ___| | |_   ___ _ __ ___   ~
| __| '__/ _` | '_ \/ __| |/ _` | __/ _ \____/ __| '_ \ / _ \ | \ \ / / | '_ ` _ \  ~
| |_| | | (_| | | | \__ \ | (_| | ||  __/    \__ \ | | |  __/ | |\ V /| | | | | | | ~
 \__|_|  \__,_|_| |_|___/_|\__,_|\__\___|    |___/_| |_|\___|_|_(_)_/ |_|_| |_| |_| ~


Author:         Egor Churaev <egor.churaev@gmail.com>
Licence:        GPLv3
Homepage:       https://github.com/echuraev/translate-shell.vim
Version:        2.0

==============================================================================
CONTENTS                               *trans* *translate-shell.vim* *trans-context*

        1. Intro ............................ |trans-intro|
           Features ......................... |trans-features|
        2. Requirements ..................... |trans-requirements|
        3. Installation ..................... |trans-installation|
        4. Usage ............................ |trans-usage|
            Commands ........................ |trans-commands|
            Key mappings .................... |trans-keys|
            Import history to Anki .......... |trans-Anki|
        5. Configuration .................... |trans-configuration|
        6. Changelog ........................ |trans-changelog|
        7. Todo ............................. |trans-todo|

==============================================================================
INTRO                                                              *trans-intro*

Translate-shell.vim is a plugin for translating text without leaving Vim. It
provides a window that displays the translate of word under cursor, selected
text or you can use "on fly" translation and translate inserted text. Also,
you can save your translate story to file and import it to Anki. More
information you can find in |trans-commands|.

------------------------------------------------------------------------------
FEATURES                                                        *trans-features*

The following features are supported by translate-shell.vim:
    - Translate word under cursor.
    - Translate multi line string.
    - Select direction of translate from predefined list.
    - Interactive translation.
    - Open interactive terminal with translate-shell (only Vim 8).
    - Keep translate story. Choose the better translate to save.
    - Download audio for translation.
    - Import translation history to Anki.

==============================================================================
REQUIREMENTS                                                *trans-requirements*

The following requirements have to be met in order to be able to use
translate-shell.vim:
    - Install translate-shell. Translate-shell is used as a backend for the
    plugin. You can find it on github:

        https://github.com/soimort/translate-shell

    Installation process is described in |trans-installation|.

==============================================================================
INSTALLATION                                                *trans-installation*

You can install translate-shell.vim by using any vim plugin manager.

Installation with vim-plug:~

If you doesn't have installed translate-shell in path, you can install plugin
by the following command: >

    Plug 'echuraev/translate-shell.vim', { 'do': 'wget -O ~/.vim/trans git.io/trans && chmod +x ~/.vim/trans' }

And after it you should specify path to translate-shell by defining
|g:trans_bin| variable e.g: >

    let g:trans_bin = "~/.vim"

If you already have installed translate-shell in your PATH then it is enough
to install plugin by the following command: >

    Plug 'echuraev/translate-shell.vim'

==============================================================================
USAGE                                                              *trans-usage*

There are several different ways to use |translate-shell.vim|:

1. Translate word under cursor (with default parameters):~

   Run command |:Trans| and word under cursor will be translated. Target
   language determines by using variable |g:trans_default_direction|.

   Exercise (translate word): `Hello`

2. Translate visual selection (with default parameters):~

   Run command |:'<,'>Trans| and word in selection will be translated. Target
   language determines by using variable |g:trans_default_direction|.

   Exercise (translate sentence): `Hello github world!`

3. Translate word under cursor (with parameters from command line):~

   You can pass any arguments to command |:Trans|. Try to translate word from
   English to German in brief mode by command: `:Trans -brief` `:de`.

   Exercise (translate word): `Hello`

4. Translate visual selection (with parameters from command line):~

   You can pass any arguments to command |:'<,'>Trans|. Try to translate
   sentence from English to German in brief mode by command:
   `:Trans -brief` `:de`.

   Exercise (translate sentence): `Hello github world!`

5. Translate word with choosing direction:~

   You can translate word and choose target translation from predefined list
   |g:trans_directions_list|. Just run command |:TransSelectDirection|.

   Exercise (translate word): `Hello`

6. Translate visual selection with choosing direction:~

   You can translate visual selection and choose target translation from
   predefined list |g:trans_directions_list|. Just run command
   |:'<,'>TransSelectDirection|.

   Exercise (translate sentence): `Hello github world!`

7. Interactive translation (translate user input):~

   You can translate anything that you wish "on fly" by using command
   |:TransInteractive|. Target language determines by using variable
   |g:trans_default_direction|.

   Exercise: Translate something with `:TransInteractive`

8. Interactive translation (translate user input):~

   You can translate anything that you wish "on fly" by using command
   |:TransInteractive|. Try to pass options from command line.

   Exercise: Translate something with `:TransInteractive -brief :de`

9. Translate terminal (works only in Vim 8):~

   You can open terminal with translate-shell and work in it by command
   |:TransTerm|. Target language determines by using variable
   |g:trans_default_direction|.

   Exercise: Translate something with `:TransTerm`

10. Translate terminal with parameters from command line (works only in Vim 8):~

   You can open terminal with translate-shell and work in it by command
   |:TransTerm|. Try to pass options from command line.

   Exercise: Translate something with `:TransTerm -brief :de`

------------------------------------------------------------------------------
COMMANDS                                                        *trans-commands*

:Trans [{options}]                                                      *:Trans*
    Translate word under cursor.

:{range}Trans [{options}]
    Translate text in {range}.

    - If you call it without any parameters it will run with default
      parameters from variable |g:trans_default_direction|.
    - If you pass options then variable |g:trans_default_direction| will be
      ignored. For more details see section |trans-usage|.

:TransSelectDirection                                    *:TransSelectDirection*
    Gives a choice of translate direction and translate word under cursor.
    Translate directions are determined in predefined list
    |g:trans_directions_list|. For more details see section |trans-usage|.

:{range}TransSelectDirection
    Gives a choice of translate direction and translate text in {range}.

:TransInteractive [{options}]                                *:TransInteractive*
    Gives a choice of translate direction and translate text of user.

    - If you call it without any parameters it will run with default
      parameters from variable |g:trans_default_direction| or will give a
      choice if list |g:trans_directions_list| is specified.
    - If you pass options then variable |g:trans_default_direction| will be
      ignored. For more details see section |trans-usage|.

:TransTerm [{options}]                                              *:TransTerm*
    Open terminal with interactive translate-shell. That works only in VIM 8.

    - If you call it without any parameters it will run with default
      parameters from variable |g:trans_default_direction|.
    - If you pass options then variable |g:trans_default_direction| will be
      ignored. For more details see section |trans-usage|.

:TransOpenHistoryWindow                                *:TransOpenHistoryWindow*
    Open file with translate history. In this window you can edit the history
    file. In case it there are several history files e.g.
    |g:trans_save_history| has value 2 or 3, you can choose which file you
    would like to open.

------------------------------------------------------------------------------
KEY MAPPING                                                         *trans-keys*

The following mappings are valid in the translate window:

<CR>/<Enter>    Add translation under cursor to history file.
q               Close the translation window

By default plugin doesn't provide any global  mapped keys. But you can create
your own key mapping for fast translation.

Example of key mapping: >

    inoremap <silent> <leader>t <ESC>:Trans<CR>
    nnoremap <silent> <leader>t :Trans<CR>
    vnoremap <silent> <leader>t :Trans<CR>
    nnoremap <silent> <leader>td :TransSelectDirection<CR>
    vnoremap <silent> <leader>td :TransSelectDirection<CR>

You can map all other commands in this way.

------------------------------------------------------------------------------
IMPORT HISTORY TO ANKI                                              *trans-Anki*

Full instruction you can find on wiki:

    https://github.com/echuraev/translate-shell.vim/wiki/Create-and-import-Anki-cards

You can import your history file to Anki.
1. You can configure format of your history file to one of format that
supports by Anki by setting |g:trans_history_format|, for example csv format:
>
    let g:trans_history_format = '%s;%t;%as;%at'
<
2. Create type of cards that supports your fields.

3. Import your history file and copy all '*.mp3' files from directory with
history file to Anki media directory:
>
    cp -f <path_to_dir_with_history_file>/*.mp3 <path_to_anki_media_dir>
<
By default Anki media directory is:
>
    ~/Documents/Anki/<UserName>/collection.media/
<
4. Learn your cards with Anki :)

==============================================================================
CONFIGURATION                                              *trans-configuration*

                                                                  *g:trans_bin*
g:trans_bin~
Default: empty

Use this option to specify the location of your translate-shell executable.
Only needed if it is not in one of the directories in your $PATH environment
variable.

Example:
>
    let g:trans_bin = "~/.vim"
<
                                                    *g:trans_default_direction*
g:trans_default_direction~
Default: empty

Use this option to specify default direction of translate. If variable is
empty then the source text translates into the language of your `locale`.

Example:
>
    let g:trans_default_direction = ":ru"
<
    or to specify two target languages:
>
    let g:trans_default_direction = ":ru+de"
<
Note: Codes of languages you can find here:

    https://github.com/soimort/translate-shell#code-list

                                                      *g:trans_directions_list*
g:trans_directions_list~
Default: empty list

Use this option to specify the list of your translate directions. This list is
used in the following commands:
    |:TransSelectDirection|, |:TransInteractive|.

This list contains lists of direction. First member of the list is source text
language, second and other are the target translation languages. If member is
empty (`''`) then language will be automatically determined.

Example:
>
    let g:trans_directions_list = [
        \['en', 'ru'],
        \['ru', 'en'],
        \['en', 'de'],
        \['en', 'ru', 'de'],
        \['', 'ru'],
        \['', ''],
    \]
<
    For this list you get the following choose:
>
    Select languages:
    1. [English -> Russian]
    2. [Russian -> English]
    3. [English -> German]
    4. [English -> Russian, German]
    5. [Autodetect -> Russian]
    6. [Autodetect -> Autodetect]
<
Note: Codes of languages you can find here:

    https://github.com/soimort/translate-shell#code-list

                                                     *g:trans_advanced_options*
g:trans_advanced_options~
Default: empty

Use this option to specify additional options for translate-shell.

Example:
>
    let g:trans_advanced_options = "-brief"
<
                                                            *g:trans_win_width*
g:trans_win_width~
Default: 50

Width of the translate windows in characters.

Example:
>
    let g:trans_win_width = 40
<
                                                           *g:trans_win_height*
g:trans_win_height~
Default: 15

Height of the translate windows in characters.

Example:
>
    let g:trans_win_height = 30
<
                                                         *g:trans_win_position*
g:trans_win_position~
Default: 'bottom'

This variable determines position of translate window.

Possible values are:
    'bottom': Windows is in the bottom of the screen.
    'up': Windows is in the up of the screen.
    'left': Windows is in the left side of the screen.
    'right': Windows is in the right side of the screen.

Example:
>
    let g:trans_win_position = "right"
<
                                                           *g:trans_join_lines*
g:trans_join_lines~
Default: 0

This option is important only for visual selection. By default the
translate-shell.vim will not join lines but sometimes it could add some
inaccuracies in translation especially when automatic text wrapping is
enabled.  It's happen because google translate thinks that every new line is
the new sentence.

If |g:trans_join_lines| is used then lines for translate will join to one. And
it can improve the quality of translation.

Example:
>
    let g:trans_join_lines = 1
<
                                                     *g:trans_save_raw_history*
g:trans_save_raw_history~
Default: 0

Use this option to enable saving history. This variable should be set in pair
with |g:trans_history_raw_file|. 'raw history' means that it will save all
history of using plugin and will save only words (without translation) that
were translated.

Example:
>
    let g:trans_save_raw_history = 1
<
                                                     *g:trans_history_raw_file*
g:trans_history_raw_file
Default: '~/.vim/.trans_raw_history'

Use this option to specify the location of your raw history file. Only needed
if variable |g:trans_save_raw_history| was set.

Example:
>
    let g:trans_history_raw_file = '~/.trans_raw_history'
<
                                                         *g:trans_save_history*
g:trans_save_history~
Default: 0

Use this option to enable saving history. This variable should be set in pair
with |g:trans_history_file|. Use this variable to save history of translation
with selected translation. If this variable is specified then you can press
<Enter> in translate window to select translation to saving. Format of saved
file you can specify with |g:trans_history_format|.

Possible values are:
    0: Saving history is disabled.
    1: Save all translations to one file that specified in
       |g:trans_history_file|.
    2: Save all translations in separate files. Files are separated by the
       source language. To the name of file that specified in
       |g:trans_history_file| will be added postfix with code of source
       language.

       Example:
       - We specified |g:trans_history_file| in the following way:
>
          let g:trans_history_file = '~/trans_history/trans_history.csv'
<
       - All translations from English will be saved in the following file:
>
          ~/trans_history/trans_history_en.csv
<
       - All translations from German will be saved in the following file:
>
          ~/trans_history/trans_history_de.csv
<
    3: Save all translations in separate files. Files are separated by the
       source language and target language. To the name of file that specified
       in |g:trans_history_file| will be added postfix with code of source
       language and code of target language.

       Example:
       - We specified |g:trans_history_file| in the following way:
>
          let g:trans_history_file = '~/trans_history/trans_history.csv'
<
       - All translations from English to Russian will be saved in the
         following file:
>
          ~/trans_history/trans_history_en_ru.csv
<
       - All translations from English to German will be saved in the
         following file:
>
          ~/trans_history/trans_history_en_de.csv
<
Example:
>
    let g:trans_save_history = 1
<
                                                         *g:trans_history_file*
g:trans_history_file
Default: ''

Use this option to specify the location of your translate history file. Only
needed if variable |g:trans_save_history| was set. If directory where history
file should be saved doesn't exist, when try to create the directory.

Example:
>
    let g:trans_history_file = '~/trans_history/trans_history.csv'
<
                                                       *g:trans_history_format*
g:trans_history_format
Default: '%s;%t'

Use this option to specify the format of translate history file. Only needed
if variable |g:trans_save_history| was set. Use flags to specify format. You
can import this file to Anki (see |trans-Anki|).

Possible flags are:
    '%s': on place of this flag will be putted source word.
    '%t': on place of this flag will be putted target word.
    '%as': on place of this flag will be putted string with audio file for
           source word. You should use this flag with option
           |g:trans_save_audio|.
    '%at': on place of this flag will be putted string with audio file for
           target word. You should use this flag with option
           |g:trans_save_audio|.

Example:
>
    let g:trans_history_format = '%s;%t;%as;%at'
<
                                            *g:trans_close_window_after_saving*
g:trans_close_window_after_saving~
Default: 0

Use this option to specify that translate window should be closed after
selecting translation to save.

Example:
>
    let g:trans_close_window_after_saving = 1
<
                                                     *g:trans_save_only_unique*
g:trans_save_only_unique~
Default: 0

Use this option to specify that only new words should be added to
|g:trans_history_file|.

Possible values are:
    0: Doesn't check is word unique or not.
    1: If word is already in |g:trans_history_file| will print message about it.
    2: If word is already in |g:trans_history_file| will add new translation
       to this word.

Example:
>
    let g:trans_save_only_unique = 2
<
                                                           *g:trans_save_audio*
g:trans_save_audio~
Default: 0

Use this option to specify that you'd like to download audio files for
translation. The audio will be downloaded in the same directory where
|g:trans_history_file| is located. After that you could import this history
and audio to Anki. See |trans-Anki| for more details.

Example:
>
    let g:trans_save_audio = 1
<
                                               *g:trans_ignore_audio_for_langs*
g:trans_ignore_audio_for_langs~
Default: empty list

Use this option to specify the list of languages for which you don't want to
download audio files.

Example:
>
    let g:trans_ignore_audio_for_langs = ['ru', 'de']
<
    In this case audio files for Russian and German languages won't download.

==============================================================================
CHANGELOG                                                      *trans-changelog*

2.0   (2018-11-03)
      - Unified :Trans and :TransVisual functions

1.2   (2018-10-25)
      - Pressing |q| in translate buffer will close translate window
      - Do not open buffer is result is empty and option -no-translate was
      passed

1.1.1 (2018-10-08)
      - Notifications about audio downloading are only for words that will be
      downloaded.
      - Fix issue with adding words to history file if buffer is open.
      - Fix issue with adding words to history file if file is open and on the
      screen.
      - Fix issue with saving same words: niemanden and niemand.

1.1   (2018-05-29)
      - Keep translate story. Choose the better translate to save.
      - Download audio for translation.
      - Import translation history to Anki.

1.0   (2018-05-15)
      - Initial release

==============================================================================
TODO                                                                *trans-todo*

    - Nice syntax highlighting
    - Folding for translation on multiple languages
    - Possibility to join lines for better translate
    - Async downloading audio for vim 8 (may be for all system calls)
    - Limit on the size of history files

==============================================================================
 vim: tw=78 ts=8 sw=4 sts=4 et ft=help
